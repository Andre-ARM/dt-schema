#!/usr/bin/env python3

import os
import sys
basedir = os.path.dirname(__file__)
import yaml
sys.path.insert(0, os.path.join(basedir, "../jsonschema-draft6"))
import jsonschema
sys.path.insert(0, os.path.join(basedir, ".."))
import dtschema
import argparse
import glob
import pkgutil

from jsonschema import FormatChecker
from jsonschema.compat import urlopen

def check_doc(filename):
    try:
        testtree = yaml.load(open(filename).read())
    except yaml.YAMLError as exc:
        print(filename + ":", exc.path[-1], exc.message)
        return

    # first validate against JSON meta schema
    try:
        jsonschema.Draft6Validator.check_schema(testtree)
    except jsonschema.SchemaError as error:
        print("%s: in %s: %s" % (filename, list(error.path), error.message))


    # Next, check against DT binding meta schema
    try:
        schema = yaml.load(pkgutil.get_data("dtschema", "meta-schemas/core.yaml"))
    except yaml.YAMLError as exc:
        print("Error in schema", filename, ": ", exc.path[-1], exc.message)
        return

    # Check that the validation schema is valid
    try:
        jsonschema.Draft6Validator.check_schema(schema)
    except jsonschema.SchemaError as exc:
        print("Error(s) validating schema", exc)
        return

    resolver = jsonschema.RefResolver.from_schema(schema, handlers=dtschema.handlers)
    validator = jsonschema.Draft6Validator(schema, resolver=resolver, format_checker=FormatChecker())
    errors = sorted(validator.iter_errors(testtree), key=lambda e: e.path)
    for error in errors:
        print("%s: in %s: %s" % (filename, list(error.path), error.message))


if __name__ == "__main__":

    ap = argparse.ArgumentParser()
    ap.add_argument("yamldt", type=str,
                    help="Filename of YAML encoded devicetree input file")
    args = ap.parse_args()

    if os.path.isdir(args.yamldt):
        for filename in glob.iglob(args.yamldt + "/**/*.yaml", recursive=True):
            check_doc(filename)
    else:
        check_doc(args.yamldt)
