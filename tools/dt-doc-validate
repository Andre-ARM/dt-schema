#!/usr/bin/env python3
# SPDX-License-Identifier: BSD-2-Clause
# Copyright 2018 Linaro Ltd.
# Copyright 2018 Arm Ltd.

import signal

def sigint_handler(signum, frame):
    sys.exit(-2)

signal.signal(signal.SIGINT, sigint_handler)

import os
import sys
import ruamel.yaml
import dtschema
import argparse
import glob

line_number = False

def check_id_path(filename, id):
    id = id.replace('http://devicetree.org/schemas/', '')
    id = id.replace('#', '')

    if not filename.endswith(id):
        print(filename + ": $id: path/filename '" + id + "' doesn't match actual filename", file=sys.stderr)
        return 1

    return 0

def check_doc(filename):
    ret = 0
    try:
        testtree = dtschema.load(filename, line_number=line_number, duplicate_keys=False)
    except (ruamel.yaml.scanner.ScannerError, ruamel.yaml.parser.ParserError) as exc:
        print(filename + ": ", exc)
        return 1
    except ruamel.yaml.YAMLError as exc:
        print(filename + ":", exc.path[-1], exc.message)
        return 1

    for error in sorted(dtschema.DTValidator.iter_schema_errors(testtree), key=lambda e: e.linecol):
        print(dtschema.format_error(filename, error, verbose=args.verbose))
        ret = 1

    if ret == 0:
        ret = check_id_path(filename, testtree['$id'])
    dtschema.DTValidator.check_schema_refs(filename + ":", testtree)

    return ret

if __name__ == "__main__":
    ap = argparse.ArgumentParser()
    ap.add_argument("yamldt", type=str,
                    help="Filename of YAML encoded devicetree input file")
    ap.add_argument('-v', '--verbose', help="verbose mode", action="store_true")
    ap.add_argument('-n', '--line-number', help="Print line and column numbers (slower)", action="store_true")
    ap.add_argument('-u', '--url-path', help="Additional search path for references")
    args = ap.parse_args()

    line_number=args.line_number

    if args.url_path:
        dtschema.add_schema_path(args.url_path)

    if os.path.isdir(args.yamldt):
        for filename in glob.iglob(args.yamldt + "/**/*.yaml", recursive=True):
            ret = check_doc(filename)
            if ret != 0:
                break
    else:
        ret = check_doc(args.yamldt)

    exit(ret)
